<?xml version="1.0" encoding="UTF-8"?>
<configuration>
	<property name="log_home" value="/home/ywk/log" />
	<property name="app_name" value="demo-activemq" />
	<property name="charset" value="UTF-8" />
	<property name="pattern" value="%d{HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n" />
	<property name="maxfilesize" value="100MB" />
	
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<!-- encoders are assigned the type ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->
		<encoder>
			<pattern>${pattern}</pattern>
			<charset>${charset}</charset>
		</encoder>
	</appender>

	<!-- 按日期和大小区分的滚动日志 -->
	<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<encoder>
			<pattern>${pattern}</pattern>
			<charset>${charset}</charset>
		</encoder>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- rollover daily -->
      		<fileNamePattern>${log_home}/${app_name}-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- or whenever the file size reaches maxFileSize -->
				<maxFileSize>${maxfilesize}</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
	</appender>
	
	<!-- error日志再独立 -->
	<appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<encoder>
			<pattern>${pattern}</pattern>
			<charset>${charset}</charset>
		</encoder>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!--
			DENY	日志将立即被抛弃不再经过其他过滤器
			NEUTRAL	有序列表里的下个过滤器继续处理日志
			ACCEPT	日志会被立即处理，不再经过剩余过滤器
		     -->
			<level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- rollover daily -->
      		<fileNamePattern>${log_home}/${app_name}-error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- or whenever the file size reaches maxFileSize -->
				<maxFileSize>${maxfilesize}</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
	</appender>
	
	<!-- additivity="true" -->
	<logger name="org.mybatis" level="DEBUG" />

	<root level="DEBUG">
		<appender-ref ref="STDOUT" />
		<appender-ref ref="FILE" />
		<appender-ref ref="ERROR_FILE" />
	</root>

</configuration>